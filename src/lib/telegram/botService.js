import { Telegraf } from 'telegraf'
import { supabaseAdmin } from '@/lib/supabase/admin'

// S·ª≠ d·ª•ng bi·∫øn global ƒë·ªÉ theo d√µi instance c·ªßa bot
// Bi·∫øn global n√†y s·∫Ω duy tr√¨ tr·∫°ng th√°i gi·ªØa c√°c l·∫ßn hot-reload
const globalAny = global
globalAny.botInstance = globalAny.botInstance || {
  bot: null,
  isRunning: false,
  lastInitTime: 0
}

class TelegramBotService {
  constructor() {
    this.isInitialized = false
    // S·ª≠ d·ª•ng bi·∫øn global thay v√¨ instance variable
    this.instanceToken = Date.now().toString() // ƒê·ªÉ nh·∫≠n d·∫°ng instance n√†y
  }

  initialize() {
    // Ki·ªÉm tra xem ƒë√£ kh·ªüi t·∫°o g·∫ßn ƒë√¢y ch∆∞a ƒë·ªÉ tr√°nh kh·ªüi t·∫°o l·∫°i qu√° nhanh
    const now = Date.now()
    if (now - globalAny.botInstance.lastInitTime < 3000) {
      console.log('‚ö†Ô∏è ƒê√£ c√≥ y√™u c·∫ßu kh·ªüi t·∫°o g·∫ßn ƒë√¢y, ch·ªù m·ªôt ch√∫t...')
      return new Promise(resolve => {
        setTimeout(() => {
          resolve(this.isReady() ? globalAny.botInstance.bot : this._initializeBot())
        }, 3000)
      })
    }

    // C·∫≠p nh·∫≠t th·ªùi gian kh·ªüi t·∫°o
    globalAny.botInstance.lastInitTime = now

    // N·∫øu ƒë√£ kh·ªüi t·∫°o r·ªìi th√¨ tr·∫£ v·ªÅ bot hi·ªán t·∫°i
    if (this.isInitialized && globalAny.botInstance.bot && globalAny.botInstance.isRunning) {
      console.log('‚ö†Ô∏è Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥')
      return Promise.resolve(globalAny.botInstance.bot)
    }

    return this._initializeBot()
  }

  async _initializeBot() {
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh')
      return null
    }

    try {
      // N·∫øu c√≥ bot instance tr∆∞·ªõc ƒë√≥, h√£y d·ª´ng n√≥
      if (globalAny.botInstance.bot && globalAny.botInstance.isRunning) {
        console.log('üîÑ D·ª´ng bot c≈© tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i...')
        try {
          await globalAny.botInstance.bot.stop()
        } catch (stopError) {
          console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ d·ª´ng bot c≈©:', stopError.message)
        }

        // ƒê·∫∑t th·ªùi gian ch·ªù ng·∫Øn ƒë·ªÉ ƒë·∫£m b·∫£o polling c≈© ƒë∆∞·ª£c d·ª´ng ho√†n to√†n
        await new Promise(resolve => setTimeout(resolve, 1000))
        globalAny.botInstance.isRunning = false
      }

      // T·∫°o bot m·ªõi
      const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN)

      // Th√™m c√°c handlers m·∫∑c ƒë·ªãnh
      this._setupHandlers(bot)

      // C·∫≠p nh·∫≠t bi·∫øn global
      globalAny.botInstance.bot = bot

      // Debug polling logs n·∫øu c·∫ßn
      if (process.env.TELEGRAM_BOT_DEBUG === 'true') {
        this._setupDebugPolling(bot)
      }

      // Kh·ªüi ƒë·ªông bot t√πy theo m√¥i tr∆∞·ªùng
      if (process.env.NODE_ENV !== 'production') {
        // Th√™m try-catch cho launch ƒë·ªÉ x·ª≠ l√Ω l·ªói 409
        try {
          await bot.launch({
            allowedUpdates: ['message', 'callback_query', 'my_chat_member', 'chat_member'],
            dropPendingUpdates: true // Quan tr·ªçng: b·ªè qua c√°c updates ƒëang ch·ªù ƒë·ªÉ tr√°nh xung ƒë·ªôt
          })
          console.log('‚ö° Telegram bot ƒë√£ kh·ªüi ƒë·ªông v·ªõi long polling (dev mode)')
          globalAny.botInstance.isRunning = true
        } catch (launchError) {
          if (launchError.message && launchError.message.includes('409')) {
            console.warn('‚ö†Ô∏è L·ªói 409: Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông ·ªü n∆°i kh√°c. Th·ª≠ l·∫°i sau 5 gi√¢y...')
            // Th·ª≠ l·∫°i sau 5 gi√¢y
            setTimeout(() => this.initialize(), 5000)
            return null
          }
          throw launchError
        }
      } else if (process.env.TELEGRAM_WEBHOOK_URL) {
        await bot.telegram.setWebhook(`${process.env.TELEGRAM_WEBHOOK_URL}/api/telegram/webhook`, {
          drop_pending_updates: true
        })
        console.log('‚ö° Telegram webhook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p')
        globalAny.botInstance.isRunning = true
      } else {
        console.warn('‚ö†Ô∏è Kh√¥ng c√≥ webhook URL trong production, fallback v·ªÅ polling')
        try {
          await bot.launch({
            dropPendingUpdates: true,
            allowedUpdates: ['message', 'callback_query', 'my_chat_member', 'chat_member']
          })
          globalAny.botInstance.isRunning = true
        } catch (launchError) {
          if (launchError.message && launchError.message.includes('409')) {
            console.warn('‚ö†Ô∏è L·ªói 409: Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông ·ªü n∆°i kh√°c. Th·ª≠ l·∫°i sau 5 gi√¢y...')
            setTimeout(() => this.initialize(), 5000)
            return null
          }
          throw launchError
        }
      }

      this.isInitialized = true

      // X·ª≠ l√Ω t·∫Øt bot ƒë√∫ng c√°ch
      process.once('SIGINT', () => this.stop('SIGINT'))
      process.once('SIGTERM', () => this.stop('SIGTERM'))

      return bot
    } catch (error) {
      console.error('‚ùå L·ªói kh·ªüi t·∫°o Telegram bot:', error)
      return null
    }
  }

  _setupDebugPolling(bot) {
    const originalGetUpdates = bot.telegram.getUpdates
    bot.telegram.getUpdates = async function (...args) {
      try {
        console.log('üìä G·ª≠i getUpdates ƒë·∫øn Telegram API...', args[0])
        const result = await originalGetUpdates.apply(this, args)
        if (result && result.length > 0) {
          console.log(`üì• Nh·∫≠n ƒë∆∞·ª£c ${result.length} c·∫≠p nh·∫≠t t·ª´ Telegram`)
        }
        return result
      } catch (error) {
        console.error('üìõ L·ªói getUpdates:', error.message)
        throw error
      }
    }
  }

  _setupHandlers(bot) {
    if (!bot) return

    // Debug middleware
    bot.use((ctx, next) => {
      console.log(`üëÅÔ∏è Bot nh·∫≠n update t·ª´: ${ctx.from?.username || 'Unknown'}`)
      return next()
    })

    // X·ª≠ l√Ω l·ªói global
    bot.catch((err, ctx) => {
      console.error(`‚ùå Bot error: ${err.message}`, err)
      ctx.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.').catch(e => {
        console.error('L·ªói khi g·ª≠i tin nh·∫Øn l·ªói:', e)
      })
    })

    // X·ª≠ l√Ω /start
    bot.start(async ctx => {
      try {
        const chatId = ctx.chat.id
        const username = ctx.from.username || 'ng∆∞·ªùi d√πng'

        const welcomeMessage = `
üëã *Xin ch√†o ${username}!*

Ch√†o m·ª´ng ƒë·∫øn v·ªõi *VinBet Notifications Bot*

üîî Bot s·∫Ω g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông v·ªÅ:
- Tr·∫°ng th√°i n·∫°p/r√∫t ti·ªÅn
- K·∫øt qu·∫£ tr√≤ ch∆°i v√† ph·∫ßn th∆∞·ªüng
- C·∫£nh b√°o ƒëƒÉng nh·∫≠p v√† b·∫£o m·∫≠t
- Th√¥ng b√°o h·ªá th·ªëng quan tr·ªçng

üîó *C√°ch li√™n k·∫øt t√†i kho·∫£n:*
1Ô∏è‚É£ ƒêƒÉng nh·∫≠p v√†o trang web VinBet
2Ô∏è‚É£ V√†o C√†i ƒë·∫∑t > Th√¥ng b√°o > Telegram
3Ô∏è‚É£ Nh·∫≠p Chat ID: \`${chatId}\`

üÜî *Chat ID c·ªßa b·∫°n l√†:* \`${chatId}\`

Ho·∫∑c s·ª≠ d·ª•ng m√£ x√°c th·ª±c t·ª´ trang c√†i ƒë·∫∑t v·ªõi l·ªánh:
/verify_XXXXXX (thay XXXXXX b·∫±ng m√£ x√°c th·ª±c)

G√µ /help ƒë·ªÉ xem th√™m th√¥ng tin.
`

        await ctx.reply(welcomeMessage, { parse_mode: 'Markdown' })
        console.log(`üë§ User kh·ªüi ƒë·ªông bot: ${username}, ChatID: ${chatId}`)
      } catch (error) {
        console.error('‚ùå L·ªói trong l·ªánh start:', error)
        ctx.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi b·∫Øt ƒë·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.')
      }
    })

    // X·ª≠ l√Ω /help
    bot.help(ctx => {
      const helpMessage = `
üìã *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng VinBet Bot*

*C√°c l·ªánh:*
/start - Kh·ªüi ƒë·ªông bot v√† nh·∫≠n th√¥ng tin
/help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y
/status - Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
/verify_XXXXXX - X√°c th·ª±c t√†i kho·∫£n v·ªõi m√£ t·ª´ web
/disconnect - H·ªßy k·∫øt n·ªëi v·ªõi t√†i kho·∫£n
/ping - Ki·ªÉm tra bot c√≤n ho·∫°t ƒë·ªông kh√¥ng

*Tr·∫°ng th√°i:*
- Chat ID c·ªßa b·∫°n: \`${ctx.chat.id}\`
- S·ª≠ d·ª•ng Chat ID n√†y ƒë·ªÉ li√™n k·∫øt t√†i kho·∫£n tr√™n web

*L∆∞u √Ω:*
- Bot kh√¥ng l∆∞u n·ªôi dung tr√≤ chuy·ªán
- Th·∫Øc m·∫Øc tr·ª£ gi√∫p: support@vinbet.com
`

      ctx.reply(helpMessage, { parse_mode: 'Markdown' })
    })

    // X·ª≠ l√Ω /ping ƒë·ªÉ ki·ªÉm tra bot c√≤n live kh√¥ng
    bot.command('ping', ctx => {
      ctx.reply('Pong! üèì Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng')
    })

    // X·ª≠ l√Ω x√°c th·ª±c t√†i kho·∫£n theo m√£
    bot.hears(/\/verify_([a-zA-Z0-9]{6,})/, async ctx => {
      try {
        const verificationCode = ctx.match[1] // L·∫•y m√£ x√°c th·ª±c t·ª´ l·ªánh
        const chatId = ctx.chat.id

        // Ki·ªÉm tra m√£ x√°c th·ª±c trong database
        const { data, error } = await supabaseAdmin
          .from('telegram_verification')
          .select('profile_id, expires_at, is_used')
          .eq('code', verificationCode)
          .single()

        if (error || !data) {
          return ctx.reply('‚ùå M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi t·ª´ trang web.')
        }

        // Ki·ªÉm tra m√£ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ch∆∞a
        if (data.is_used) {
          return ctx.reply('‚ùå M√£ x√°c th·ª±c n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng tr∆∞·ªõc ƒë√≥.')
        }

        // Ki·ªÉm tra m√£ c√≤n hi·ªáu l·ª±c kh√¥ng
        const now = new Date()
        if (new Date(data.expires_at) < now) {
          return ctx.reply('‚ùå M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi t·ª´ trang web.')
        }

        // C·∫≠p nh·∫≠t Telegram ID cho ng∆∞·ªùi d√πng
        const { error: updateError } = await supabaseAdmin
          .from('profiles')
          .update({
            telegram_id: chatId.toString(),
            updated_at: new Date().toISOString()
          })
          .eq('id', data.profile_id)

        if (updateError) {
          console.error('L·ªói c·∫≠p nh·∫≠t profile:', updateError)
          return ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra khi li√™n k·∫øt t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.')
        }

        // ƒê√°nh d·∫•u m√£ ƒë√£ s·ª≠ d·ª•ng
        await supabaseAdmin
          .from('telegram_verification')
          .update({
            is_used: true,
            used_at: new Date().toISOString()
          })
          .eq('code', verificationCode)

        // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
        await ctx.reply(
          `
‚úÖ *X√°c th·ª±c th√†nh c√¥ng!*

T√†i kho·∫£n VinBet c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt v·ªõi Telegram Bot.
T·ª´ gi·ªù b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c c√°c th√¥ng b√°o quan tr·ªçng v·ªÅ:

- Tr·∫°ng th√°i n·∫°p/r√∫t ti·ªÅn
- K·∫øt qu·∫£ c√°c l∆∞·ª£t c∆∞·ª£c
- Th√¥ng b√°o ƒëƒÉng nh·∫≠p
- C√°c th√¥ng b√°o h·ªá th·ªëng quan tr·ªçng

C√°m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa VinBet! üéÆ
`,
          { parse_mode: 'Markdown' }
        )

        // T·∫°o th√¥ng b√°o trong Supabase
        await supabaseAdmin.rpc('create_notification', {
          p_profile_id: data.profile_id,
          p_title: 'K·∫øt n·ªëi Telegram th√†nh c√¥ng',
          p_content:
            'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Telegram. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c c√°c th√¥ng b√°o quan tr·ªçng qua Telegram.',
          p_type: 'system'
        })
      } catch (error) {
        console.error('L·ªói trong qu√° tr√¨nh x√°c th·ª±c:', error)
        ctx.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i sau.')
      }
    })

    // X·ª≠ l√Ω l·ªánh /status - ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
    bot.command('status', async ctx => {
      try {
        const chatId = ctx.chat.id

        // Ki·ªÉm tra xem chat ID n√†y ƒë√£ li√™n k·∫øt v·ªõi t√†i kho·∫£n n√†o ch∆∞a
        const { data, error } = await supabaseAdmin
          .from('profiles')
          .select('username, display_name, created_at')
          .eq('telegram_id', chatId.toString())
          .single()

        if (error || !data) {
          return ctx.reply(
            `
‚ùå *Ch∆∞a k·∫øt n·ªëi*

Telegram c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c li√™n k·∫øt v·ªõi t√†i kho·∫£n VinBet n√†o.

üÜî Chat ID c·ªßa b·∫°n: \`${chatId}\`

ƒê·ªÉ k·∫øt n·ªëi, vui l√≤ng:
1. ƒêƒÉng nh·∫≠p v√†o website VinBet
2. V√†o C√†i ƒë·∫∑t > Th√¥ng b√°o > Telegram
3. Nh·∫≠p Chat ID n√†y v√† l√†m theo h∆∞·ªõng d·∫´n
`,
            { parse_mode: 'Markdown' }
          )
        }

        // ƒê·ªãnh d·∫°ng th·ªùi gian
        const joinDate = new Date(data.created_at)
        const formattedDate = joinDate.toLocaleDateString('vi-VN')

        // Hi·ªÉn th·ªã th√¥ng tin
        await ctx.reply(
          `
‚úÖ *ƒê√£ k·∫øt n·ªëi*

üë§ T√†i kho·∫£n: ${data.display_name || data.username}
üìÖ Ng√†y tham gia: ${formattedDate}
üÜî Chat ID: \`${chatId}\`

Bot ƒëang g·ª≠i th√¥ng b√°o cho t√†i kho·∫£n n√†y.
ƒê·ªÉ ng·∫Øt k·∫øt n·ªëi, s·ª≠ d·ª•ng l·ªánh /disconnect
`,
          { parse_mode: 'Markdown' }
        )
      } catch (error) {
        console.error('L·ªói ki·ªÉm tra tr·∫°ng th√°i:', error)
        ctx.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i sau.')
      }
    })

    // X·ª≠ l√Ω l·ªánh /disconnect - ng·∫Øt k·∫øt n·ªëi t√†i kho·∫£n
    bot.command('disconnect', async ctx => {
      try {
        const chatId = ctx.chat.id

        // Ki·ªÉm tra xem chat ID n√†y ƒë√£ li√™n k·∫øt v·ªõi t√†i kho·∫£n n√†o ch∆∞a
        const { data, error } = await supabaseAdmin
          .from('profiles')
          .select('id, username, display_name')
          .eq('telegram_id', chatId.toString())
          .single()

        if (error || !data) {
          return ctx.reply('‚ùå Telegram c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c li√™n k·∫øt v·ªõi t√†i kho·∫£n VinBet n√†o.')
        }

        // X√≥a telegram_id trong profile
        const { error: updateError } = await supabaseAdmin
          .from('profiles')
          .update({
            telegram_id: null,
            updated_at: new Date().toISOString()
          })
          .eq('id', data.id)

        if (updateError) {
          console.error('L·ªói ng·∫Øt k·∫øt n·ªëi t√†i kho·∫£n:', updateError)
          return ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ng·∫Øt k·∫øt n·ªëi t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.')
        }

        // T·∫°o th√¥ng b√°o trong Supabase
        await supabaseAdmin.rpc('create_notification', {
          p_profile_id: data.id,
          p_title: 'Ng·∫Øt k·∫øt n·ªëi Telegram',
          p_content:
            'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ng·∫Øt k·∫øt n·ªëi kh·ªèi Telegram. B·∫°n s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o qua Telegram n·ªØa.',
          p_type: 'system'
        })

        // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
        await ctx.reply(
          `
‚úÖ *Ng·∫Øt k·∫øt n·ªëi th√†nh c√¥ng!*

T√†i kho·∫£n VinBet ${data.display_name || data.username} ƒë√£ ƒë∆∞·ª£c ng·∫Øt k·∫øt n·ªëi kh·ªèi Telegram Bot.
B·∫°n s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o qua Telegram n·ªØa.

ƒê·ªÉ k·∫øt n·ªëi l·∫°i, h√£y truy c·∫≠p trang web VinBet v√† l√†m theo h∆∞·ªõng d·∫´n.
`,
          { parse_mode: 'Markdown' }
        )
      } catch (error) {
        console.error('L·ªói khi ng·∫Øt k·∫øt n·ªëi:', error)
        ctx.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi ng·∫Øt k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.')
      }
    })

    // Bot command ƒë·ªÉ xem giao d·ªãch g·∫ßn ƒë√¢y
    bot.command('transactions', async ctx => {
      try {
        const chatId = ctx.chat.id

        // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ li√™n k·∫øt ch∆∞a
        const { data: profile, error } = await supabaseAdmin
          .from('profiles')
          .select('id')
          .eq('telegram_id', chatId.toString())
          .single()

        if (error || !profile) {
          return ctx.reply(
            '‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n li√™n k·∫øt v·ªõi Telegram n√†y. Vui l√≤ng k·∫øt n·ªëi t√†i kho·∫£n tr√™n web tr∆∞·ªõc.'
          )
        }

        // L·∫•y 5 giao d·ªãch g·∫ßn ƒë√¢y nh·∫•t
        const { data: transactions, error: txError } = await supabaseAdmin
          .from('transactions')
          .select('*')
          .eq('profile_id', profile.id)
          .order('created_at', { ascending: false })
          .limit(5)

        if (txError) {
          return ctx.reply('‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau.')
        }

        if (!transactions || transactions.length === 0) {
          return ctx.reply('üëÄ B·∫°n ch∆∞a c√≥ giao d·ªãch n√†o g·∫ßn ƒë√¢y.')
        }

        // Format th√¥ng tin giao d·ªãch
        const messageLines = ['*5 Giao d·ªãch g·∫ßn ƒë√¢y nh·∫•t c·ªßa b·∫°n:*\n']

        transactions.forEach((tx, index) => {
          const date = new Date(tx.created_at).toLocaleString('vi-VN')
          const type = this._getTransactionTypeName(tx.type)

          const amount =
            tx.type === 'deposit' || tx.type === 'win' || tx.type === 'referral_reward'
              ? `+${tx.amount.toLocaleString('vi-VN')} VND`
              : `-${tx.amount.toLocaleString('vi-VN')} VND`

          messageLines.push(`${index + 1}. ${type}: ${amount}`)
          messageLines.push(`   ${date}`)
          messageLines.push(`   Tr·∫°ng th√°i: ${this._getTransactionStatusName(tx.status)}\n`)
        })

        messageLines.push('üíª Xem chi ti·∫øt t·∫°i: vinbet.com/finance/transactions')

        await ctx.reply(messageLines.join('\n'), { parse_mode: 'Markdown' })
      } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω l·ªánh transactions:', error)
        ctx.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.')
      }
    })
  }

  _getTransactionTypeName(type) {
    const types = {
      deposit: 'N·∫°p ti·ªÅn',
      withdrawal: 'R√∫t ti·ªÅn',
      bet: 'ƒê·∫∑t c∆∞·ª£c',
      win: 'Th·∫Øng c∆∞·ª£c',
      referral_reward: 'Th∆∞·ªüng gi·ªõi thi·ªáu'
    }
    return types[type] || type
  }

  _getTransactionStatusName(status) {
    const statuses = {
      completed: 'Ho√†n th√†nh',
      pending: 'ƒêang x·ª≠ l√Ω',
      failed: 'Th·∫•t b·∫°i',
      cancelled: 'ƒê√£ h·ªßy'
    }
    return statuses[status] || status
  }

  async stop(reason) {
    console.log(`üõë Stopping Telegram bot due to ${reason}`)

    if (globalAny.botInstance.bot && globalAny.botInstance.isRunning) {
      try {
        await globalAny.botInstance.bot.stop()
        globalAny.botInstance.isRunning = false
        this.isInitialized = false
        console.log('üëç Bot ƒë√£ d·ª´ng th√†nh c√¥ng')
      } catch (error) {
        console.error('‚ùå L·ªói khi d·ª´ng bot:', error)
      }
    }
  }

  getBot() {
    return globalAny.botInstance.bot
  }

  isReady() {
    return this.isInitialized && globalAny.botInstance.bot !== null && globalAny.botInstance.isRunning
  }
}

// Create singleton instance
const botService = new TelegramBotService()

export default botService
