// src/app/api/telegram/send/test/route.js
export const dynamic = 'force-dynamic'

import { NextResponse } from 'next/server'
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { sendCustomNotification } from '@/utils/telegramBot'
import { handleApiError } from '@/utils/errorHandler'
import { updateTelegramStats } from '@/utils/telegramStats'

export async function POST() {
  try {
    const supabase = createRouteHandlerClient({ cookies })

    // Ki·ªÉm tra session
    const { data: sessionData } = await supabase.auth.getSession()
    if (!sessionData.session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const userId = sessionData.session.user.id

    // L·∫•y th√¥ng tin Telegram t·ª´ profile
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('telegram_id, telegram_settings, username, display_name')
      .eq('id', userId)
      .single()

    if (profileError || !profile?.telegram_id) {
      return NextResponse.json(
        {
          error: 'Telegram ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi t√†i kho·∫£n n√†y'
        },
        { status: 400 }
      )
    }

    const telegramId = profile.telegram_id
    const displayName = profile.display_name || profile.username || 'Ng∆∞·ªùi d√πng'

    // T·∫°o n·ªôi dung tin nh·∫Øn th·ª≠ nghi·ªám
    const title = 'üîî Ki·ªÉm tra k·∫øt n·ªëi Telegram'
    const message = `Xin ch√†o ${displayName}!

ƒê√¢y l√† tin nh·∫Øn th·ª≠ nghi·ªám t·ª´ VinBet.
K·∫øt n·ªëi Telegram c·ªßa b·∫°n ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c c√°c th√¥ng b√°o quan tr·ªçng qua k√™nh n√†y.

‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}
üÜî Telegram ID: ${telegramId}

C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa VinBet!`

    // G·ª≠i th√¥ng b√°o
    const success = await sendCustomNotification(telegramId, title, message)

    // C·∫≠p nh·∫≠t th·ªëng k√™
    if (success) {
      await updateTelegramStats('notifications_sent')
    }

    return NextResponse.json({
      success,
      message: success ? 'ƒê√£ g·ª≠i tin nh·∫Øn th·ª≠ nghi·ªám' : 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn th·ª≠ nghi·ªám'
    })
  } catch (error) {
    return handleApiError(error, 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn th·ª≠ nghi·ªám')
  }
}
