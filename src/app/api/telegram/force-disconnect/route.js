// src/app/api/telegram/force-disconnect/route.js
export const dynamic = 'force-dynamic'

import { NextResponse } from 'next/server'
import { Telegraf } from 'telegraf'

export async function POST() {
  try {
    console.log('üîÑ Th·ª±c hi·ªán force-disconnect Telegram bot...')

    // T·∫°o bot instance t·∫°m th·ªùi (kh√¥ng l∆∞u tr·ªØ, ch·ªâ ƒë·ªÉ th·ª±c hi·ªán cleanup)
    const tempBot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN)

    // X√≥a webhook v√† b·ªè c√°c updates ƒëang ch·ªù
    await tempBot.telegram.deleteWebhook({ drop_pending_updates: true })

    // S·ª≠ d·ª•ng getUpdates v·ªõi timeout ng·∫Øn v√† offset -1 ƒë·ªÉ reset k·∫øt n·ªëi
    await tempBot.telegram.getUpdates(1, 100, -1)

    // Th√™m th·ªùi gian ch·ªù d√†i h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o API ƒë√£ x·ª≠ l√Ω y√™u c·∫ßu
    await new Promise(resolve => setTimeout(resolve, 5000))

    return NextResponse.json({
      success: true,
      message: 'ƒê√£ th·ª±c hi·ªán force-disconnect th√†nh c√¥ng. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông l·∫°i bot.'
    })
  } catch (error) {
    console.error('‚ùå L·ªói khi th·ª±c hi·ªán force-disconnect:', error)
    return NextResponse.json(
      {
        success: false,
        error: error.message
      },
      { status: 500 }
    )
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c POST ƒë·ªÉ ng·∫Øt k·∫øt n·ªëi bot Telegram',
    method: 'POST',
    usage: 'S·ª≠ d·ª•ng API n√†y ƒë·ªÉ ng·∫Øt k·∫øt n·ªëi bot hi·ªán t·∫°i tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i',
    warning: 'Thao t√°c n√†y s·∫Ω bu·ªôc bot ng·∫Øt k·∫øt n·ªëi hi·ªán t·∫°i v√† l√†m m·∫•t c√°c updates ƒëang ch·ªù.'
  })
}
